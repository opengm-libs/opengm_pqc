/* (c) 2025 OpenGM groups */

#ifndef OPENGM_PQC_H
#define OPENGM_PQC_H

/* Generated with cbindgen:0.28.0 */

/* Warning, this file is autogenerated by cbindgen. Don't modify this manually. */

#include <stdarg.h>
#include <stdbool.h>
#include <stdint.h>
#include <stdlib.h>

#ifdef __cplusplus
extern "C" {
#endif // __cplusplus

/**
 * mlkem768_keygen_internal 密钥生成,dk必须指向dk_len的缓冲区
 * d,z必须指向32字节, d,z由调用者使用随机数发生器生成.
 */
void *mlkem1024_keygen_internal(const uint8_t *d, const uint8_t *z);

void *mlkem1024_encapkey(void *dk_handle);

int32_t mlkem1024_encap_internal(uint8_t *key, uint8_t *c, void *ek_handle, const uint8_t *m);

int32_t mlkem1024_decap(uint8_t *key, const uint8_t *c, void *dk_handle);

void mlkem1024_encapkey_encode(uint8_t *ek_encoded, void *ek_handle);

void *mlkem1024_encapkey_decode(const uint8_t *ek_encoded);

void mlkem1024_decapkey_encode(uint8_t *dk_encoded, void *dk_handle);

void *mlkem1024_decapkey_decode(const uint8_t *dk_encoded);

void mlkem1024_drop_encapkey_handle(void *ek_handle);

void mlkem1024_drop_decapkey_handle(void *dk_handle);

/**
 *  exports C api
 * mlkem512_keygen_internal 密钥生成,dk必须指向dk_len的缓冲区
 * d,z必须指向32字节, d,z由调用者使用随机数发生器生成.
 */
void *mlkem512_keygen_internal(const uint8_t *d, const uint8_t *z);

void *mlkem512_encapkey(void *dk_handle);

int32_t mlkem512_encap_internal(uint8_t *key, uint8_t *c, void *ek_handle, const uint8_t *m);

int32_t mlkem512_decap(uint8_t *key, const uint8_t *c, void *dk_handle);

void mlkem512_encapkey_encode(uint8_t *ek_encoded, void *ek_handle);

void *mlkem512_encapkey_decode(const uint8_t *ek_encoded);

void mlkem512_decapkey_encode(uint8_t *dk_encoded, void *dk_handle);

void *mlkem512_decapkey_decode(const uint8_t *dk_encoded);

void mlkem512_drop_encapkey_handle(void *ek_handle);

void mlkem512_drop_decapkey_handle(void *dk_handle);

/**
 * mlkem768_keygen_internal 密钥生成,dk必须指向dk_len的缓冲区
 * d,z必须指向32字节, d,z由调用者使用随机数发生器生成.
 */
void *mlkem768_keygen_internal(const uint8_t *d, const uint8_t *z);

void *mlkem768_encapkey(void *dk_handle);

int32_t mlkem768_encap_internal(uint8_t *key, uint8_t *c, void *ek_handle, const uint8_t *m);

int32_t mlkem768_decap(uint8_t *key, const uint8_t *c, void *dk_handle);

void mlkem768_encapkey_encode(uint8_t *ek_encoded, void *ek_handle);

void *mlkem768_encapkey_decode(const uint8_t *ek_encoded);

void mlkem768_decapkey_encode(uint8_t *dk_encoded, void *dk_handle);

void *mlkem768_decapkey_decode(const uint8_t *dk_encoded);

void mlkem768_drop_encapkey_handle(void *ek_handle);

void mlkem768_drop_decapkey_handle(void *dk_handle);

/**
 *  exports C api
 */
void *mldsa44_generate_key_internal(const uint8_t *xi);

void *mldsa44_public_key(void *sk_handle);

void mldsa44_private_key_encode(uint8_t *sk, void *sk_handle);

void mldsa44_public_key_encode(uint8_t *pk, void *pk_handle);

void *mldsa44_import_private_key(const uint8_t *sk);

void *mldsa44_import_public_key(const uint8_t *pk);

uint32_t mldsa44_sign_internal(uint8_t *sig, void *sk_handle, const uint8_t *m, uintptr_t mlen, const uint8_t *rnd);

bool mldsa44_verify_internal(const uint8_t *sig, void *pk_handle, const uint8_t *m, uintptr_t mlen);

void mldsa44_drop_private_key_handle(void *sk_handle);

void mldsa44_drop_public_key_handle(void *pk_handle);

/**
 *  exports C api
 */
void *mldsa65_generate_key_internal(const uint8_t *xi);

void *mldsa65_public_key(void *sk_handle);

void mldsa65_private_key_encode(uint8_t *sk, void *sk_handle);

void mldsa65_public_key_encode(uint8_t *pk, void *pk_handle);

void *mldsa65_import_private_key(const uint8_t *sk);

void *mldsa65_import_public_key(const uint8_t *pk);

uint32_t mldsa65_sign_internal(uint8_t *sig, void *sk_handle, const uint8_t *m, uintptr_t mlen, const uint8_t *rnd);

bool mldsa65_verify_internal(const uint8_t *sig, void *pk_handle, const uint8_t *m, uintptr_t mlen);

void mldsa65_drop_private_key_handle(void *sk_handle);

void mldsa65_drop_public_key_handle(void *pk_handle);

/**
 *  exports C api
 */
void *mldsa87_generate_key_internal(const uint8_t *xi);

void *mldsa87_public_key(void *sk_handle);

void mldsa87_private_key_encode(uint8_t *sk, void *sk_handle);

void mldsa87_public_key_encode(uint8_t *pk, void *pk_handle);

void *mldsa87_import_private_key(const uint8_t *sk);

void *mldsa87_import_public_key(const uint8_t *pk);

uint32_t mldsa87_sign_internal(uint8_t *sig, void *sk_handle, const uint8_t *m, uintptr_t mlen, const uint8_t *rnd);

bool mldsa87_verify_internal(const uint8_t *sig, void *pk_handle, const uint8_t *m, uintptr_t mlen);

void mldsa87_drop_private_key_handle(void *sk_handle);

void mldsa87_drop_public_key_handle(void *pk_handle);

#ifdef __cplusplus
}  // extern "C"
#endif  // __cplusplus

#endif  /* OPENGM_PQC_H */
