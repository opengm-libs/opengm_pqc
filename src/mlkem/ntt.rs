use super::zq::{self, barrett_mul};

const ntt_table: [u16; 128] = [
    1, 1729, 2580, 3289, 2642, 630, 1897, 848, 1062, 1919, 193, 797, 2786, 3260, 569, 1746, 296,
    2447, 1339, 1476, 3046, 56, 2240, 1333, 1426, 2094, 535, 2882, 2393, 2879, 1974, 821, 289, 331,
    3253, 1756, 1197, 2304, 2277, 2055, 650, 1977, 2513, 632, 2865, 33, 1320, 1915, 2319, 1435,
    807, 452, 1438, 2868, 1534, 2402, 2647, 2617, 1481, 648, 2474, 3110, 1227, 910, 17, 2761, 583,
    2649, 1637, 723, 2288, 1100, 1409, 2662, 3281, 233, 756, 2156, 3015, 3050, 1703, 1651, 2789,
    1789, 1847, 952, 1461, 2687, 939, 2308, 2437, 2388, 733, 2337, 268, 641, 1584, 2298, 2037,
    3220, 375, 2549, 2090, 1645, 1063, 319, 2773, 757, 2099, 561, 2466, 2594, 2804, 1092, 403,
    1026, 1143, 2150, 2775, 886, 1722, 1212, 1874, 1029, 2110, 2935, 885, 2154,
];

const ntt_inv_table: [i32; 128] = [
    1,
    17,
    -17,
    2761,
    -2761,
    583,
    -583,
    2649,
    -2649,
    1637,
    -1637,
    723,
    -723,
    2288,
    -2288,
    1100,
    -1100,
    1409,
    -1409,
    2662,
    -2662,
    3281,
    -3281,
    233,
    -233,
    756,
    -756,
    2156,
    -2156,
    3015,
    -3015,
    3050,
    -3050,
    1703,
    -1703,
    1651,
    -1651,
    2789,
    -2789,
    1789,
    -1789,
    1847,
    -1847,
    952,
    -952,
    1461,
    -1461,
    2687,
    -2687,
    939 - 939,
    2308,
    -2308,
    2437,
    -2437,
    2388,
    -2388,
    733,
    -733,
    2337,
    -2337,
    268,
    -268,
    641,
    -641,
    1584,
    -1584,
    2298,
    -2298,
    2037,
    -2037,
    3220,
    -3220,
    375,
    -375,
    2549,
    -2549,
    2090,
    -2090,
    1645,
    -1645,
    1063,
    -1063,
    319,
    -319,
    2773,
    -2773,
    757,
    -757,
    2099,
    -2099,
    561,
    -561,
    2466,
    -2466,
    2594,
    -2594,
    2804,
    -2804,
    1092,
    -1092,
    403,
    -403,
    1026,
    -1026,
    1143,
    -1143,
    2150,
    -2150,
    2775,
    -2775,
    886,
    -886,
    1722,
    -1722,
    1212,
    -1212,
    1874,
    -1874,
    1029,
    -1029,
    2110,
    -2110,
    2935,
    -2935,
    885,
    -885,
    2154,
    -2154,
];

/// f = ntt(f)
pub(crate) fn ntt_inplace(f: &mut [u16]) {
    let mut i = 1;
    let mut len = 128;
    while len >= 2{
        let mut start = 0;
        while start < 256{
            let zeta = ntt_table[i];
            i += 1;
            for j in start..start+len{
                let t = barrett_mul(zeta, f[j+len]);
                f[j+len] = if f[j] >= t {
                    f[j] - t
                }else{ 
                    f[j] + zq::q as u16 - t
                };
                f[j] = f[j] + t;
                if f[j] >= zq::q as u16 {
                    f[j] -= zq::q as u16;
                }
            }
            start += 2*len;
        }
        len >>= 1;
    }
}


/// f = ntt^-1(f)
pub(crate) fn ntt_inv_inplace(f: &mut [u16]) {
    let mut i = 127;
    let mut len = 2;
    while len <= 128{
        let mut start = 0;
        while start < 256{
            let zeta = ntt_table[i];
            i -= 1;
            for j in start..start+len{
                let t = f[j];
                f[j] = t + f[j+len];
                if f[j] >= zq::q as u16 {
                    f[j] -= zq::q as u16;
                }

                f[j+len] = if f[j+len] >= t {
                    f[j+len] - t
                }else{ 
                    f[j+len] + zq::q as u16 - t
                };
                f[j+len] = barrett_mul(zeta, f[j+len]);
            }
            start += 2*len;
        }
        len <<= 1;
    }
    for x in f{
        *x = barrett_mul(*x, 3303);
    }
}



#[cfg(test)]
mod tests {
    use rand::{thread_rng, Rng};

    use crate::mlkem::zq;

    use super::{ntt_inplace, ntt_inv_inplace};


    #[test]
    fn test_ntt(){
        let mut f = [0u16;256];
        let mut rng = thread_rng();
        for x in &mut f{
            *x = rng.r#gen::<u16>() % zq::q as u16;
        }
        let f_cloned = f.clone();

        ntt_inplace(&mut f);
        ntt_inv_inplace(&mut f);

        assert_eq!(f, f_cloned);
    }

}